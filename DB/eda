import pyodbc
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import calendar
 
# --- DB CONNECTION & QUERY (copied from db_connect.py) ---
from DB.db_connect import run_query
def get_sales_data(conn):
    query = """
        SELECT TOP 10000 *
        FROM [Project].[dbo].[FINAL_QUERY]
    """
    return pd.read_sql(query, conn)
 
# --- LOAD DATA ---
 
conn = get_connection()
df = get_sales_data(conn)
conn.close()
 
# ---- EDA ---

print("üìå Sample Data:")
print(df.head())
 
print("\nüì¶ Shape of data:", df.shape)
 
print("\nüß± Null values:")
print(df.isnull().sum())
 
print("\nüî† Data types:")
print(df.dtypes)
 
print("\nüìä Summary statistics:")
print(df.describe())
 
print("\nüè∑Ô∏è DIVISIONS by Total Sale Amount:")
print(df.groupby('DIVISION')["NET_SALE_AMOUNT"].sum().sort_values(ascending=False).head(10))
 
print("\nüåç Sales by Region:")
print(df.groupby('REGION')["NET_SALE_AMOUNT"].sum())
 
print("\nüóìÔ∏è Sales by Month:")
print(df.groupby('MONTH')["NET_SALE_AMOUNT"].sum().sort_index())

#yearly sales
bisconni_df = df[df['DIVISION'] == 'BISCONNI']
yearly_sales = bisconni_df.groupby('YEAR')['NET_SALE_AMOUNT'].sum().sort_index()
print("üìà Yearly Sales for BISCONNI:")
print(yearly_sales)

#Monthly Sales
monthly_sales = bisconni_df.groupby('MONTH')['NET_SALE_AMOUNT'].sum().sort_index()
print("\nüìä Monthly Sales for BISCONNI:")
print(monthly_sales)



# ---- Visuals ----
# Monthly Sales
df.groupby('MONTH')["NET_SALE_AMOUNT"].sum().sort_index().plot(
    kind='bar',
    title='Monthly Sales',
    xlabel='Month',
    ylabel='Net Sale Amount',
    figsize=(10, 5),
    color='skyblue'
)
plt.tight_layout()
plt.show()
 
# Region Sales
plt.figure(figsize=(8, 5))
sns.barplot(data=df, x='REGION', y='NET_SALE_AMOUNT', estimator=sum, ci=None)
plt.title('Sales by Region')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# division Sales
plt.figure(figsize=(8, 5))
sns.barplot(data=df, x='DIVISION', y='NET_SALE_AMOUNT', estimator=sum, ci=None)
plt.title('Sales by DIVISION')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# ‚úÖ Yearly Sales Plot
filtered_df = df[df['DIVISION'].str.upper().isin(['BISCONNI', 'CANDYLAND'])]

yearly_sales = (
    filtered_df.groupby(['YEAR', 'DIVISION'])['NET_SALE_AMOUNT']
    .sum()
    .reset_index()
)

plt.figure(figsize=(10, 5))  
sns.barplot(data=yearly_sales, x='YEAR', y='NET_SALE_AMOUNT', hue='DIVISION')
plt.title("üìà Yearly Sales: BISCONNI vs CANDYLAND")
plt.ylabel("Net Sales")
plt.xlabel("Year")
plt.legend(title='Division')
plt.tight_layout()
plt.show()

#Monthly Sales
monthly_sales = (
    filtered_df.groupby(['MONTH', 'DIVISION'])['NET_SALE_AMOUNT']
    .sum()
    .reset_index()
)

plt.figure(figsize=(10, 5)) 
sns.barplot(data=monthly_sales, x='MONTH', y='NET_SALE_AMOUNT', hue='DIVISION')
plt.title("üìä Monthly Sales (All Years): BISCONNI vs CANDYLAND")
plt.ylabel("Net Sales")
plt.xlabel("Month")
plt.legend(title='Division')
plt.tight_layout()
plt.show()



# üîç Filter for BISCONNI and CANDYLAND
filtered_df = df[df['DIVISION'].str.upper().isin(['BISCONNI', 'CANDYLAND'])]
#Group sales by YEAR, MONTH, DIVISION
heatmap_data = (
    filtered_df
    .groupby(['DIVISION', 'YEAR', 'MONTH'])['NET_SALE_AMOUNT']
    .sum()
    .reset_index()
)

#Create heatmap per division
for division in heatmap_data['DIVISION'].unique():
    pivot = heatmap_data[heatmap_data['DIVISION'] == division].pivot_table(
        index='YEAR',
        columns='MONTH',
        values='NET_SALE_AMOUNT',
        aggfunc='sum'
    ).fillna(0)

    pivot.columns = [calendar.month_abbr[m] for m in pivot.columns]

    # Set a different colormap for each division
    cmap = 'YlGnBu' if division == 'BISCONNI' else 'OrRd'

    plt.figure(figsize=(12, 6))
    sns.heatmap(pivot, annot=True, fmt=".0f", cmap=cmap)
    plt.title(f"üå°Ô∏è Monthly Sales Heatmap - {division}")
    plt.xlabel("Month")
    plt.ylabel("Year")
    plt.tight_layout()
    plt.show()
