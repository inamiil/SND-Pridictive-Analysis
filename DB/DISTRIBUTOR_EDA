import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.ticker as ticker
from db_connect import run_query

# === Query 1: National Top 3 Brands ===
national_query = """
-- === Query 1: National Top 3 Brands ===
WITH BrandSales AS (
    SELECT 
        BRAND,
        YEAR,
        MONTH,
        SUM(NET_SALE_AMOUNT) AS MONTHLY_SALES
    FROM FINAL_QUERY
    GROUP BY BRAND, YEAR, MONTH
),
TopBrands AS (
    SELECT TOP 3 BRAND
    FROM FINAL_QUERY
    GROUP BY BRAND
    ORDER BY SUM(NET_SALE_AMOUNT) DESC
)
SELECT 
    BS.BRAND,
    BS.YEAR,
    BS.MONTH,
    BS.MONTHLY_SALES
FROM BrandSales BS
JOIN TopBrands TB ON BS.BRAND = TB.BRAND
ORDER BY BS.BRAND, BS.YEAR, BS.MONTH;

"""

# === Query 2: Top 3 Brands Per Region ===
regional_query = """
-- === Query 2: Regional Top 3 Brands ===
WITH RankedBrands AS (
    SELECT 
        REGION,
        BRAND,
        YEAR,
        MONTH,
        SUM(NET_SALE_AMOUNT) AS MONTHLY_SALES
    FROM FINAL_QUERY
    WHERE BRAND IS NOT NULL
    GROUP BY REGION, BRAND, YEAR, MONTH
),
TopBrands AS (
    SELECT REGION, BRAND
    FROM (
        SELECT 
            REGION, 
            BRAND,
            SUM(MONTHLY_SALES) AS TOTAL_SALES,
            ROW_NUMBER() OVER (PARTITION BY REGION ORDER BY SUM(MONTHLY_SALES) DESC) AS RN
        FROM RankedBrands
        GROUP BY REGION, BRAND
    ) AS Sub
    WHERE RN <= 3
),
MonthlyTrend AS (
    SELECT 
        F.REGION,
        F.BRAND,
        F.YEAR,
        F.MONTH,
        SUM(F.NET_SALE_AMOUNT) AS MONTHLY_SALES
    FROM FINAL_QUERY F
    INNER JOIN TopBrands T
        ON F.REGION = T.REGION AND F.BRAND = T.BRAND
    GROUP BY F.REGION, F.BRAND, F.YEAR, F.MONTH
)
SELECT * 
FROM MonthlyTrend
ORDER BY REGION, BRAND, YEAR, MONTH;

"""

# === Run Queries ===
national_df = pd.DataFrame(run_query(national_query))
regional_df = pd.DataFrame(run_query(regional_query))

# === Format Axis as K/M ===
def format_ticks_as_k(ax):
    ax.yaxis.set_major_formatter(
        ticker.FuncFormatter(lambda x, _: f'{x/1_000_000:.1f}M' if x >= 1_000_000 else f'{x/1_000:.0f}K')
    )

# === Prepare and Plot National Top 3 Brands ===
national_df['YEAR_MONTH'] = national_df['YEAR'].astype(str) + '-' + national_df['MONTH'].astype(str).str.zfill(2)
plt.figure(figsize=(12, 6))
sns.lineplot(data=national_df, x='YEAR_MONTH', y='MONTHLY_SALES', hue='BRAND', marker='o', palette='tab10')
plt.title("ðŸ“ˆ Monthly Sales Trend for Top 3 Brands (National View)")
plt.xlabel("Month")
plt.ylabel("Net Sales")
plt.xticks(rotation=45)
format_ticks_as_k(plt.gca())
plt.legend(title='Brand')
plt.tight_layout()
plt.show()

# === Prepare and Plot Regional Top 3 Brands ===
regional_df['YEAR_MONTH'] = regional_df['YEAR'].astype(str) + '-' + regional_df['MONTH'].astype(str).str.zfill(2)
sns.set_style("whitegrid")
g = sns.FacetGrid(regional_df, col='REGION', col_wrap=3, height=4, sharey=False)
g.map_dataframe(
    sns.barplot,
    x='YEAR_MONTH',
    y='MONTHLY_SALES',
    hue='BRAND',
    palette='Set2'
)
g.set_axis_labels("Month", "Net Sales")
g.set_titles("{col_name}")
for ax in g.axes.flat:
    ax.set_xticklabels(ax.get_xticklabels(), rotation=45)
    format_ticks_as_k(ax)
g.add_legend(title="Top Brands")
plt.subplots_adjust(top=0.9)
g.fig.suptitle("ðŸ“ˆ Monthly Sales Trend of Top 3 Brands per Region", fontsize=16)
plt.tight_layout()
plt.show()
